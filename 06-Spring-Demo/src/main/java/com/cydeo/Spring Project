Spring Project Structure

src/main/java - contains application source code
src/main/resources - contains non-java resources
src/test/java - contains test code

mvnw and mvnw.cmd - maven wrapper scripts. You can use these scripts to build your
project even if you do not have maven installed on your machine

pom.xml - Maven build specs

Application.java - SpringBoot main class that bootstraps the project.

application.properties - this file initially empty but offers a place where you can specify configuration properties

static - contains any static content:images, css, js, etc.
templates - contains templates files that will be used to render content to the browser (ex. Thymeleaf)

ApplicationTests.java - this is a simple test class that makes sure that Spring app content loads successfully. You
will add more tests once you build your app.

*********************************************************************
Build Specs:

<parent> - this specifies that your project has spring-boot-starter-parent as its parent POM. This parent POM
provides dependency management for several libraries commonly used in Spring projects. For those libraries covered
by the parent POM, you won't have to specify a version, it is inherited from the parent.

All dependencies have the word starter in their artifact ID.
Your build file will be smaller and easier to manage because you won't need to declare a dependency
on every library you might need.
You are able to think of your dependencies in terms of what capabilities they provide rather than their library names.
( web starter dependency). You are free from the burden of worrying about library versions. You only need to worry
 about the version of Spring Boot you are using.

 Spring Boot Plugin
        - provides a Maven goal that enables you run the application using maven
        - ensures that all dependency libraries are included within the executable jar file

 ****************************************************************************

 Bootstrapping the application:

 Because you will be running the app from an executable JAR, it is important to have a main class that will be executed
 when the JAR file is run.

 @SpringBootApplication - composite annotation that combines teh following annotations:
        - @SpringBootConfiguration - designates this class as a config class. YOu can add Java based Spring
        framework configuration to this class if yo need. This annotation is a specialized form of a
        @Configuration annotation
        - @EnableAutoConfiguration - enables SpringBoot automatic configuration. It tell SpringBoot to automatically
        configure any components that it thinks you will need.
        - @ComponentScan - enables component scanning. This lets you declare other classes with annotation like
        @Component to have Spring automatically discover and register them as components in teh Spring app context.

 main method - calls a static run method on a SpringApplication class, which performs the actual bootstrapping of the
 application, creating teh Spring app context. The 2 params passed to run() are a configuration class and the command
 line arguments.